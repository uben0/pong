#include <iostream>
#include <cassert>

#include "KWindow.hpp"
#include "KTerm.hpp"

KWindow::KWindow() :
KRect(),
m_window(nullptr),
m_renderer(nullptr),
m_name(),
m_hidden(true),
m_id(0),
m_textures(),
event()
{}

KWindow::KWindow(const std::string& name, int width, int height, const KSurface& icon, Flags flags) :
KWindow()
{
	open(name, width, height, icon, flags);
}

KWindow::~KWindow() {
	close();
}

unsigned int KWindow::get_id() const {
	return m_id;
}

void KWindow::remove_texture(unsigned int id) {
	if (id < m_textures.size() and m_textures[id] != nullptr) {
		SDL_DestroyTexture(m_textures[id]);
		m_textures[id] = nullptr;
	}
}

void KWindow::show() {
	if (m_window != nullptr and m_hidden) {
		m_hidden = false;
		SDL_ShowWindow(m_window);
		verbose("show");
	}
}

void KWindow::hide() {
	if (m_window != nullptr && not m_hidden) {
		m_hidden = true;
		SDL_HideWindow(m_window);
		verbose("hide");
	}
}

void KWindow::verbose(const std::string& message) {
	std::cout << KTerm::Bold << "[" << KTerm::Color(204) << "KWindow" << KTerm::UColor
	<< "] " << KTerm::UBold << KTerm::Color(204) << message << KTerm::Def << std::endl;
}

bool KWindow::is_opened() {
	return m_window != nullptr;
}

bool KWindow::is_closed() {
	return m_window == nullptr;
}

bool KWindow::open(const std::string& name, int width, int height, const KSurface& icon, Flags flags) {
	close();
	m_window = SDL_CreateWindow(name.c_str(), SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, width, height, flags);
	if (m_window == nullptr) return false;
	SDL_SetWindowData(m_window, "this", this);
	m_renderer = SDL_CreateRenderer(m_window, -1, 0);
	if (m_renderer == nullptr) {
		SDL_DestroyWindow(m_window);
		m_window = nullptr;
		return false;
	}
	verbose("opened");
	m_name = name;
	x = 0;
	y = 0;
	w = width;
	h = height;
	m_id = SDL_GetWindowID(m_window);
	KLib_SDL::linker->add_window(this);

	if (icon.size() > 0) {
		SDL_SetWindowIcon(m_window, icon.get_ptr());
	}
	else {
		KColor map[32 * 32] = {
			0x00000000, 0x00000000, 0x92dbff07, 0x84e3ff6e, 0x85e3ffc8, 0x85e3fff4, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3fff4, 0x85e3ffc8, 0x85e3ff6d, 0x92dbff07, 0x00000000, 0x00000000,
			0x00000000, 0x84e3ff1b, 0x84e3ffd0, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffcf, 0x84e3ff1b, 0x00000000,
			0x92dbff07, 0x84e3ffd0, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffcf, 0x92dbff07,
			0x84e3ff6e, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x84e3ff6c,
			0x85e3ffc9, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffc7,
			0x85e3fff3, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x83c3d6ff, 0x829ba3ff, 0x829ba3ff, 0x83c3d6ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x83c3d6ff, 0x829ba3ff, 0x829ba3ff, 0x83c3d6ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3fff3,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x83c3d6ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x82b5c4ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x83c3d6ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x83c3d6ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x829ba3ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x82b5c4ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x829ba3ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x829ba3ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x829ba3ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x82b5c4ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x819399ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x819399ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x83c3d6ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x82b5c4ff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x819399ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x819399ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x83b7c6ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x83b4c2ff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x819399ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x819399ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x83b7c6ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x83b4c2ff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x819399ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x819399ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x83b7c6ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff,
			0x83b4c2ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x819399ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x819399ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x83b7c6ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff,
			0x808080ff, 0x82a3adff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x819399ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x819399ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x82b5c4ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff,
			0x808080ff, 0x808080ff, 0x82adbaff, 0x85e3ffff, 0x85e3ffff, 0x819399ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x819399ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x82b5c4ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff,
			0x808080ff, 0x808080ff, 0x81888aff, 0x85e3ffff, 0x85e3ffff, 0x819399ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x819399ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x82b5c4ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff,
			0x808080ff, 0x808080ff, 0x81888aff, 0x85e3ffff, 0x85e3ffff, 0x819399ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x819399ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x82b5c4ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff,
			0x808080ff, 0x808080ff, 0x82adbaff, 0x85e3ffff, 0x85e3ffff, 0x819399ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x819399ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x83b7c6ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff,
			0x808080ff, 0x81a3adff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x819399ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x819399ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x83b7c6ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff,
			0x82b3c2ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x819399ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x819399ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x83b7c6ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x82b3c2ff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x819399ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x819399ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x83b7c6ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x82b3c2ff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x819399ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x819399ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x83c3d6ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x82b5c4ff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x819399ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x819399ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x829ba3ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x82b5c4ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x819399ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x819399ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x829ba3ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x82b5c4ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x829ba3ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x829ba3ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x83c3d6ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x82b5c4ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x83c3d6ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x808080ff, 0x83c3d6ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3fff3, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x83c3d6ff, 0x829ba3ff, 0x829ba3ff, 0x83c3d6ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x83c3d6ff, 0x829ba3ff, 0x829ba3ff, 0x83c3d6ff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3fff1,
			0x85e3ffc9, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffc7,
			0x85e3ff6d, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x84e3ff6c,
			0x92dbff07, 0x85e3ffcf, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffcf, 0x80d5ff06,
			0x00000000, 0x84e3ff1b, 0x85e3ffcf, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffcf, 0x84e3ff1b, 0x00000000,
			0x00000000, 0x00000000, 0x80d5ff06, 0x84e3ff6c, 0x85e3ffc7, 0x85e3fff3, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff,
			0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3ffff, 0x85e3fff3, 0x85e3ffc6, 0x84e3ff6c, 0x80d5ff06, 0x00000000, 0x00000000
		};
		KSurface surface(32, 32);
		KColor* surfaceMap = surface.get_map();
		for (unsigned i = 0; i < surface.size(); i++) {
			surfaceMap[i] = map[i];
		}
		SDL_SetWindowIcon(m_window, surface.get_ptr());
	}
	return true;
}

void KWindow::display() {
	if (is_opened()) {
		SDL_RenderPresent(m_renderer);
	}
}

void KWindow::set_alpha_blend(bool set) {
	if (is_opened()) {
		SDL_SetRenderDrawBlendMode(m_renderer, set ? SDL_BLENDMODE_BLEND : SDL_BLENDMODE_NONE);
	}
}

void KWindow::close() {
	if (is_opened()) {
		SDL_DestroyRenderer(m_renderer);
		m_renderer = nullptr;
		SDL_DestroyWindow(m_window);
		m_window = nullptr;
		m_id = 0;
		x = 0;
		y = 0;
		w = 0;
		h = 0;
		KLib_SDL::linker->remove_window(this);
		verbose("closed");
	}
}

void KWindow::load_texture(KSurface& src) {
	if (is_opened() and src.size() > 0) {
		unsigned int id = src.get_id();
		if (id >= m_textures.size()) {
			m_textures.resize(id + 1, nullptr);
		}
		if (m_textures[id] == nullptr) {
			m_textures[id] = SDL_CreateTextureFromSurface(m_renderer, src.get_ptr());
		}
	}
}

void KWindow::print(KSurface& src) {
	if (is_opened() and src.size() > 0) {
		unsigned int id = src.get_id();
		if (id >= m_textures.size() or m_textures[id] == nullptr) {
			load_texture(src);
		}
		SDL_RenderCopy(m_renderer, m_textures[id], nullptr, (SDL_Rect*)&src);
	}
}

void KWindow::print(KSurface& src, int x, int y) {
	if (is_opened() and src.size() > 0) {
		unsigned int id = src.get_id();
		if (id >= m_textures.size() or m_textures[id] == nullptr) {
			load_texture(src);
		}
		SDL_Rect rect = {x, y, src.w, src.h};
		SDL_RenderCopy(m_renderer, m_textures[id], nullptr, &rect);
	}
}

void KWindow::print(KSurface& src, int x, int y, int w, int h) {
	if (is_opened() and src.size() > 0) {
		unsigned int id = src.get_id();
		if (id >= m_textures.size() or m_textures[id] == nullptr) {
			load_texture(src);
		}
		SDL_Rect rect = {x, y, w, h};
		SDL_RenderCopy(m_renderer, m_textures[id], nullptr, &rect);
	}
}

void KWindow::fill(const KRect<>& rect, KColor color) {
	if (is_opened()) {
		SDL_SetRenderDrawColor(m_renderer, color.r, color.g, color.b, color.a);
		SDL_RenderFillRect(m_renderer, (SDL_Rect*)&rect);
	}
}

void KWindow::fill(KColor color) {
	if (is_opened()) {
		SDL_SetRenderDrawColor(m_renderer, color.r, color.g, color.b, color.a);
		SDL_RenderClear(m_renderer);
	}
}

void KWindow::draw_line(int x1, int y1, int x2, int y2, KColor color) {
	if (is_opened()) {
		SDL_SetRenderDrawColor(m_renderer, color.r, color.g, color.b, color.a);
		SDL_RenderDrawLine(m_renderer, x1, y1, x2, y2);
	}
}

void KWindow::draw_rect(const KRect<>& rect, KColor color) {
	if (is_opened()) {
		SDL_SetRenderDrawColor(m_renderer, color.r, color.g, color.b, color.a);
		SDL_RenderDrawRect(m_renderer, (SDL_Rect*)&rect);
	}
}

void KWindow::update_size() {
	SDL_GetWindowSize(m_window, &w, &h);
}

void KWindow::resize(int width, int height) {
	if (is_opened()) {
		w = width;
		h = height;
		SDL_SetWindowSize(m_window, w, h);
	}
}
